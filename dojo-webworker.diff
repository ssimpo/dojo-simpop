diff -r 2627a99f2501 -r 781f0fa88b6c .hgtags
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/.hgtags	Sat Dec 08 11:52:32 2012 +0000
@@ -0,0 +1,1 @@
+2627a99f25016c97aa946569b3fef91f09145a79 ORGINAL
diff -r 2627a99f2501 -r 781f0fa88b6c _base/configWebworker.js
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/_base/configWebworker.js	Sat Dec 08 11:52:32 2012 +0000
@@ -0,0 +1,52 @@
+function webworkerDojoConfig(config, baseUrl){
+	// reset the has cache with webworker-appropriate values;
+	var hasCache = {
+		"host-browser":0,
+		"dom":0,
+		"dojo-dom-ready-api":0,
+		"dojo-sniff": 0,
+		"dojo-inject-api": 1
+	};
+	
+	for(var p in hasCache){
+		config.hasCache[p] = hasCache[p];
+	}
+	
+	var cacheBust = window.dojoConfig.cacheBust;
+	var fixupUrl= function(url){
+		url += ""; // make sure url is a Javascript string (some paths may be a Java string)
+		return url + (cacheBust ? ((/\?/.test(url) ? "&" : "?") + cacheBust) : "");
+	}
+	
+	// reset some configuration switches with webworker-appropriate values
+	var webworkerConfig = {
+		"baseUrl": "/scripts/dojo/",
+		"loaderPatch": {
+			injectUrl: function(url, callback){
+				try{
+					importScripts(readUrl(url, "UTF-8"));
+					callback();
+				}catch(e){
+					console.info("failed to load resource (" + url + ")");
+					console.error(e);
+				}
+			},
+			getText: function(url, async, onLoad){
+				var xhr = new XMLHttpRequest();
+				xhr.open('GET', fixupUrl(url), false);
+				xhr.send(null);
+				if(xhr.status == 200 || (!location.host && !xhr.status)){
+					if(onLoad){
+						onLoad(xhr.responseText, async);
+					}
+				}else{
+					console.error("xhrFailed", xhr.status);
+				}
+				return xhr.responseText;
+			}
+		}
+	}
+	for(p in webworkerConfig){
+		config[p] = webworkerConfig[p];
+	}
+}
\ No newline at end of file
diff -r 2627a99f2501 -r 781f0fa88b6c dojo.js
--- a/dojo.js	Sat Dec 08 10:43:34 2012 +0100
+++ b/dojo.js	Sat Dec 08 11:52:32 2012 +0000
@@ -167,6 +167,20 @@
 		load(baseUrl + "/_base/configRhino.js");
 		rhinoDojoConfig(defaultConfig, baseUrl, rhinoArgs);
 	}
+	
+	has.add("is-webworker", ((typeof importScripts !== 'undefined') && (typeof document === 'undefined')));
+	if(has("is-webworker")){
+		var path = "";
+		for(var i = 0; i < global.config.dojoConfig.packages.length; i++){
+			var cPackage = global.config.dojoConfig.packages[i];
+			if(cPackage.name == "dojo"){
+				path += cPackage.location + "/";
+			}
+		}
+		
+		importScripts(path+"/_base/configWebworker.js");
+		webworkerDojoConfig(defaultConfig, baseUrl)
+	}
 
 	// userConfig has tests override defaultConfig has tests; do this after the environment detection because
 	// the environment detection usually sets some has feature values in the hasCache.

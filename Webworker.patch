From 298f60ddde62ba69d036a7f00f3fcec794715e4a Mon Sep 17 00:00:00 2001
From: Stephen Simpson <me@simpo.org>
Date: Fri, 17 May 2013 14:25:07 +0100
Subject: [PATCH 1/2] Changes to allow dojo to be loaded in a WebWorker
 thread.

---
 _base/config.js          |  5 ++++-
 _base/configWebWorker.js | 53 ++++++++++++++++++++++++++++++++++++++++++++++++
 dojo.js                  | 19 +++++++++++++++++
 request/handlers.js      |  2 +-
 4 files changed, 77 insertions(+), 2 deletions(-)
 create mode 100644 _base/configWebWorker.js

diff --git a/_base/config.js b/_base/config.js
index aa55c66..714157b 100644
--- a/_base/config.js
+++ b/_base/config.js
@@ -185,7 +185,10 @@ return {
 
 	if(!result.locale){
 		// Default locale for browsers.
-		result.locale = (navigator.language || navigator.userLanguage).toLowerCase();
+		var language = (navigator.language || navigator.userLanguage);
+		if(language){
+			result.locale = language.toLowerCase();
+		}
 	}
 
 	return result;
diff --git a/_base/configWebWorker.js b/_base/configWebWorker.js
new file mode 100644
index 0000000..f8c0eb5
--- /dev/null
+++ b/_base/configWebWorker.js
@@ -0,0 +1,53 @@
+function webworkerDojoConfig(config, global){
+	var hasCache = {
+		"host-browser": 0,
+		"dom": 0,
+		"dojo-dom-ready-api": 0,
+		"dojo-sniff": 0,
+		"dojo-inject-api": 1,
+		"host-webworker": 1
+	};
+
+	for(var p in hasCache){
+		config.hasCache[p] = hasCache[p];
+	}
+	
+	global.window = global;
+
+	var cacheBust = global.dojoConfig.cacheBust;
+	var fixupUrl= function(url){
+		url += ""; // make sure url is a Javascript string (some paths may be a Java string)
+		return url + (cacheBust ? ((/\?/.test(url) ? "&" : "?") + cacheBust) : "");
+	}
+
+	// reset some configuration switches with webworker-appropriate values
+	var webworkerConfig = {
+		"loaderPatch": {
+			injectUrl: function(url, callback){
+				try{
+					importScripts(url);
+					callback();
+				}catch(e){
+					console.info("failed to load resource (" + url + ")");
+					console.error(e);
+				}
+			},
+			getText: function(url, async, onLoad){
+				var xhr = new XMLHttpRequest();
+				xhr.open('GET', fixupUrl(url), false);
+				xhr.send(null);
+				if(xhr.status == 200 || (!location.host && !xhr.status)){
+					if(onLoad){
+						onLoad(xhr.responseText, async);
+					}
+				}else{
+					console.error("xhrFailed", xhr.status);
+				}
+				return xhr.responseText;
+			}
+		}
+	}
+	for(p in webworkerConfig){
+		config[p] = webworkerConfig[p];
+	}
+}
\ No newline at end of file
diff --git a/dojo.js b/dojo.js
index 54d4b8e..1214957 100644
--- a/dojo.js
+++ b/dojo.js
@@ -167,6 +167,24 @@
 		load(baseUrl + "/_base/configRhino.js");
 		rhinoDojoConfig(defaultConfig, baseUrl, rhinoArgs);
 	}
+	
+	has.add("host-webworker", ((typeof importScripts !== 'undefined') && (typeof document === 'undefined')));
+	if(has("host-webworker")){
+		var dojoPath = global.dojoConfig.baseUrl;
+		
+		for(var i = 0; i < global.dojoConfig.packages.length; i++){
+			var cPackage = global.dojoConfig.packages[i];
+			if(cPackage.name == "dojo"){
+				dojoPath += cPackage.location.replace(/^\.\//,"") + "/";
+			}
+		}
+		
+		importScripts(
+			dojoPath+"_base/configWebworker.js"+
+				((global.dojoConfig.cacheBust === true) ? "?" + new Date() : "")
+		);
+		webworkerDojoConfig(defaultConfig, global);
+	}
 
 	// userConfig has tests override defaultConfig has tests; do this after the environment detection because
 	// the environment detection usually sets some has feature values in the hasCache.
@@ -931,6 +949,7 @@
 			var pid, pack, midInPackage, mapItem, url, result, isRelative, requestedMid;
 			requestedMid = mid;
 			isRelative = /^\./.test(mid);
+			
 			if(/(^\/)|(\:)|(\.js$)/.test(mid) || (isRelative && !referenceModule)){
 				// absolute path or protocol of .js filetype, or relative path but no reference module and therefore relative to page
 				// whatever it is, it's not a module but just a URL of some sort
diff --git a/request/handlers.js b/request/handlers.js
index f88d3bc..e04c229 100644
--- a/request/handlers.js
+++ b/request/handlers.js
@@ -3,7 +3,7 @@ define([
 	'../_base/kernel',
 	'../_base/array',
 	'../has',
-	'../selector/_loader' // only included for has() qsa tests
+	'../has!dom?../selector/_loader' // only included for has() qsa tests
 ], function(JSON, kernel, array, has){
 	has.add('activex', typeof ActiveXObject !== 'undefined');
 	has.add('dom-parser', function(global){
-- 
1.8.0.msysgit.0


From ffc7de2e4a5fb917603eedbcc1df787491bcf560 Mon Sep 17 00:00:00 2001
From: Stephen Simpson <me@simpo.org>
Date: Fri, 17 May 2013 15:48:59 +0100
Subject: [PATCH 2/2] Added webworker capture to redirect the default request
 to xhr.

---
 request/default.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/request/default.js b/request/default.js
index b82aacf..9943df0 100644
--- a/request/default.js
+++ b/request/default.js
@@ -6,7 +6,7 @@ define([
 	var defId = has('config-requestProvider'),
 		platformId;
 
-	if(has('host-browser')){
+	if(has('host-browser') || has('host-webworker')){
 		platformId = './xhr';
 	}else if(has('host-node')){
 		platformId = './node';
-- 
1.8.0.msysgit.0

